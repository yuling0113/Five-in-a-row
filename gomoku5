import tkinter as tk
import random


class GomokuGame(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Gomoku Game")
        self.geometry("600x650")
        self.cell_size = 30
        self.board_size = 15
        self.board = [[0] * self.board_size for _ in range(self.board_size)]
        self.current_player = 1
        self.remaining_time = 30

        # Player information
        self.player_black = None
        self.player_white = None
        self.scores = {}  # Dictionary to store player scores

        # Distribution mode
        self.distribution_mode = tk.StringVar(value="random")  # Default: random
        self.black_player_choice = tk.StringVar(value="player1")  # Default: Player 1
        self.black_choice_frame = None # Black choice frame (for showing/hiding)

        # Start with welcome screen
        self.show_welcome_screen()

    # Welcome screen display settings (Page 1)
    def show_welcome_screen(self):
        self.clear_screen()
        self.canvas = tk.Canvas(self, width=600, height=650, bg="lightblue")
        self.canvas.pack()
        self.canvas.create_text(
            300, 200, text="Welcome to Gomoku Game", font=("Arial", 24, "bold")
        )
          
        # Go to rule page.
        Rules_button = tk.Button(self, text="How to play", font=("Arial", 16), bg="white", command=self.show_rules_screen)
        self.canvas.create_window(300, 350, window=Rules_button)  # Place the button at (300, 450) inside the canvas

        # Continue to username_input_screen.
        self.continue_button(command=self.show_username_input_screen)
    
    # Rule Page display setting
    def show_rules_screen(self):
        self.clear_screen()
        self.canvas = tk.Canvas(self, width=600, height=650, bg="lightyellow")
        self.canvas.pack()
        rules = """
        Rules:
        1. Black goes first, followed by White.
        2. Players take turns placing piece.
        3. Each player has 30 seconds per turn.
        4. The first player to place 5 consecutive pieces 
           horizontally, vertically, or diagonally wins.

        """
        self.canvas.create_text(
            300, 200, text="How to Play", font=("Arial", 24, "bold")
        )
        self.canvas.create_text(
            300, 350, text=rules, font=("Arial", 14), justify="left"
        )

        self.continue_button(command=self.show_username_input_screen)


    # Username input and black and white distribution mode choice (Page 2)
    def show_username_input_screen(self):
        self.clear_screen()
        self.canvas = tk.Canvas(self, width=600, height=650, bg="lightblue")
        self.canvas.pack()

        # Instructions
        self.canvas.create_text(
            330, 100, text="Enter User Names", font=("Arial", 24, "bold")
        )

        # Player 1 name entry
        tk.Label(self, text="Player 1:", font=("Arial", 16),bg="white").place(x=150, y=150)
        player1_entry = tk.Entry(self, font=("Arial", 16))
        player1_entry.place(x=250, y=150)

        # Player 2 name entry
        tk.Label(self, text="Player 2:", font=("Arial", 16)).place(x=150, y=200)
        player2_entry = tk.Entry(self, font=("Arial", 16))
        player2_entry.place(x=250, y=200)

        # Distribution mode selection
        tk.Label(self, text="Distribution Mode:", font=("Arial", 16), ).place(x=100, y=250)
        tk.Radiobutton(
            self, text="Random", variable=self.distribution_mode, value="random", font=("Arial", 14,"bold"),
            command=self.hide_black_player_choice, bg="lightblue"
        ).place(x=290, y=250)
        tk.Radiobutton(
            self, text="Custom", variable=self.distribution_mode, value="custom", font=("Arial", 14,"bold"),
            command=self.show_black_player_choice, bg="lightblue"
        ).place(x=400, y=250)

        # Black player choice (only for custom mode)
        self.black_player_choice_frame = tk.Frame(self)
        self.black_player_choice_frame.place(x=100, y=300)
        tk.Label(self.black_player_choice_frame, text="Choose Black Player:", font=("Arial", 16)).pack(side="left")
        tk.Radiobutton(
            self.black_player_choice_frame, text="Player 1", variable=self.black_player_choice, value="player1", font=("Arial", 14)
        ).pack(side="left")
        tk.Radiobutton(
            self.black_player_choice_frame, text="Player 2", variable=self.black_player_choice, value="player2", font=("Arial", 14)
        ).pack(side="left")
        self.hide_black_player_choice()  # Initially hide black choice

        # Submit button
        submit_button = tk.Button(
            self, text="Submit", font=("Arial", 16),
            command=lambda: self.assign_players(player1_entry.get(), player2_entry.get())
        )
        submit_button.place(x=250, y=450)

    def hide_black_player_choice(self):
        """Hide the black player choice frame."""
        if self.black_player_choice_frame:
            self.black_player_choice_frame.place_forget()

    def show_black_player_choice(self):
        """Show the black player choice frame."""
        if self.black_player_choice_frame:
            self.black_player_choice_frame.place(x=100, y=300)

    def assign_players(self, player1, player2):
        if not player1 or not player2:
            return

        if self.distribution_mode.get() == "random":
            if random.choice([True, False]):
                self.player_black, self.player_white = player1, player2
            else:
                self.player_black, self.player_white = player2, player1
        elif self.distribution_mode.get() == "custom":
            if self.black_player_choice.get() == "player1":
                self.player_black, self.player_white = player1, player2
            elif self.black_player_choice.get() == "player2":
                self.player_black, self.player_white = player2, player1
            else:
                return
            
        # Initialize scores for new players if not already present
        self.scores.setdefault(self.player_black, 0)
        self.scores.setdefault(self.player_white, 0)

        self.show_player_assignment_result()
    
    #def show_player_assignment_result():
    def show_player_assignment_result(self):
        self.clear_screen()
        self.canvas = tk.Canvas(self, width=600, height=650, bg="lightyellow")
        self.canvas.pack()
        Results = f"""

        Black: {self.player_black}
        White: {self.player_white}
        """
        self.canvas.create_text(
            300, 200, text="Player Distribution", font=("Arial", 24, "bold"),justify="center"
        )
        self.canvas.create_text(
            300, 250, text=Results, font=("Arial", 20)
        )
        
        self.continue_button(command=self.start_game)

    # Game playing screen(Page 4)
    def start_game(self):
        self.clear_screen()

        # Create timer label
        self.timer_label = tk.Label(
            self, text=f"Black's time left: {self.remaining_time}s", font=("Arial", 16)
        )
        self.timer_label.pack()

        # Create game canvas
        self.canvas = tk.Canvas(
            self,
            width=self.board_size * self.cell_size,
            height=self.board_size * self.cell_size,
            bg="burlywood",
        )
        self.canvas.pack()
        self.canvas.bind("<Button-1>", self.place_piece)
        self.draw_board()

        # Start timer
        self.update_timer()

    def clear_screen(self):
        for widget in self.winfo_children():
            widget.destroy()

    def draw_board(self):
        for i in range(self.board_size):
            self.canvas.create_line(
                0, i * self.cell_size, self.board_size * self.cell_size, i * self.cell_size
            )
            self.canvas.create_line(
                i * self.cell_size, 0, i * self.cell_size, self.board_size * self.cell_size
            )

    def place_piece(self, event):
        x, y = event.x // self.cell_size, event.y // self.cell_size
        if x >= self.board_size or y >= self.board_size or self.board[y][x] != 0:
            return

        self.board[y][x] = self.current_player
        color = "black" if self.current_player == 1 else "white"
        self.canvas.create_oval(
            x * self.cell_size + 5,
            y * self.cell_size + 5,
            (x + 1) * self.cell_size - 5,
            (y + 1) * self.cell_size - 5,
            fill=color,
        )

        if self.check_winner(x, y):
            winner = self.player_black if self.current_player == 1 else self.player_white
            self.display_winner(f"Game Over! {winner} wins!")
            return

        self.current_player = 3 - self.current_player
        self.remaining_time = 30
        self.update_timer_label()

    def update_timer(self):
        if self.remaining_time > 0:
            self.remaining_time -= 1
            self.update_timer_label()
            self.after(1000, self.update_timer)
        else:
            winner = self.player_white if self.current_player == 1 else self.player_black
            self.display_winner(f"{winner} wins by timeout!")

    def update_timer_label(self):
        player = self.player_black if self.current_player == 1 else self.player_white
        self.timer_label.config(text=f"{player}'s time left: {self.remaining_time}s")

    # Gameover screen (Page 5)
    def display_winner(self, message):
        self.canvas.unbind("<Button-1>")
        self.clear_screen()

        winner = self.player_black if self.current_player == 1 else self.player_white
        self.scores[winner] += 1

        winner_label = tk.Label(self, text=message, font=("Arial", 32, "bold"), fg="red")
        winner_label.pack(pady=50)

        # Display scores
        score_text = f"""
        Scores:
        {self.player_black}: {self.scores[self.player_black]}
        {self.player_white}: {self.scores[self.player_white]}
        """
        score_label = tk.Label(self, text=score_text, font=("Arial", 16))
        score_label.pack(pady=10)

        restart_button = tk.Button(
            self, text="Restart", font=("Arial", 16), command=self.restart_game
        )
        restart_button.pack(pady=10)

        quit_button = tk.Button(
            self, text="Quit", font=("Arial", 16), command=self.quit
        )
        quit_button.pack(pady=10)

    # Restart game and swap players
    def restart_game(self):
        # Swap players
        self.player_black, self.player_white = self.player_white, self.player_black
        self.board = [[0] * self.board_size for _ in range(self.board_size)]
        self.current_player = 1
        self.remaining_time = 30
        self.start_game()
    
    # Continue button display setting
    def continue_button(self, command):
        """
        Create a 'Continue' button with a customizable command.
        """
        continue_button = tk.Button(self, text="Continue", font=("Arial", 16), bg="white", command=command)
        self.canvas.create_window(300, 450, window=continue_button)  # Place the button at (300, 450) inside the canvas
        return continue_button

    # Winner Checking function
    def count_in_one_direction(self, x, y, dx, dy):
        count = 0
        while (
           0 <= x < self.board_size
           and 0 <= y < self.board_size
           and self.board[y][x] == self.current_player
        ):
           count += 1
           x += dx
           y += dy
        return count

    def check_winner(self, x, y):
        directions = [(1, -1), (1, 1), (1, 0), (0, 1)]
        for dx, dy in directions:
           count = 1
           count += self.count_in_one_direction(x + dx, y + dy, dx, dy)
           count += self.count_in_one_direction(x - dx, y - dy, -dx, -dy)
           if count >= 5:
               return True
        return False


if __name__ == "__main__":
    game = GomokuGame()
    game.mainloop()
