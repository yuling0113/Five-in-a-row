import tkinter as tk


class GomokuGame(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Gomoku Game")
        self.geometry("600x650")
        self.cell_size = 30  # Size of each grid cell
        self.board_size = 15  # Board size
        self.board = [[0] * self.board_size for _ in range(self.board_size)]  # 0 represents empty
        self.current_player = 1  # 1 is black, 2 is white
        self.remaining_time = 30  # Time limit per turn

        # Initialize GUI elements
        self.timer_label = None
        self.canvas = None

        # Start with welcome screen
        self.show_welcome_screen()

    def show_welcome_screen(self):
        self.clear_screen()
        self.canvas = tk.Canvas(self, width=600, height=650, bg="lightblue")
        self.canvas.pack()
        self.canvas.create_text(
            300, 200, text="Welcome to Gomoku Game", font=("Arial", 24, "bold")
        )
        self.canvas.create_text(
            300, 400, text="Click anywhere to continue", font=("Arial", 16)
        )
        self.canvas.bind("<Button-1>", lambda _: self.show_rules_screen())

    def show_rules_screen(self):
        self.clear_screen()
        self.canvas = tk.Canvas(self, width=600, height=650, bg="lightyellow")
        self.canvas.pack()
        rules = """
        Rules:
        1. Black goes first, followed by White.
        2. Players take turns placing stones.
        3. First player to align 5 stones horizontally, 
           vertically, or diagonally wins.
        4. Each player has 30 seconds per turn.
        """
        self.canvas.create_text(
            300, 200, text="How to Play", font=("Arial", 24, "bold")
        )
        self.canvas.create_text(
            300, 350, text=rules, font=("Arial", 16), justify="center"
        )
        self.canvas.create_text(
            300, 500, text="Click anywhere to continue", font=("Arial", 16)
        )
        self.canvas.bind("<Button-1>", lambda _: self.start_game())

    def start_game(self):
        self.clear_screen()

        # Create timer label
        self.timer_label = tk.Label(
            self, text=f"Black's time left: {self.remaining_time}s", font=("Arial", 16)
        )
        self.timer_label.pack()

        # Create game canvas
        self.canvas = tk.Canvas(
            self,
            width=self.board_size * self.cell_size,
            height=self.board_size * self.cell_size,
            bg="burlywood",
        )
        self.canvas.pack()
        self.canvas.bind("<Button-1>", self.place_piece)
        self.draw_board()

        # Start timer
        self.update_timer()

    def clear_screen(self):
        """Clear all widgets from the window."""
        for widget in self.winfo_children():
            widget.destroy()

    def draw_board(self):
        for i in range(self.board_size):
            # Horizontal lines
            self.canvas.create_line(
                0, i * self.cell_size, self.board_size * self.cell_size, i * self.cell_size
            )
            # Vertical lines
            self.canvas.create_line(
                i * self.cell_size, 0, i * self.cell_size, self.board_size * self.cell_size
            )

    def place_piece(self, event):
        x, y = event.x // self.cell_size, event.y // self.cell_size
        if x >= self.board_size or y >= self.board_size or self.board[y][x] != 0:
            return

        self.board[y][x] = self.current_player
        color = "black" if self.current_player == 1 else "white"
        self.canvas.create_oval(
            x * self.cell_size + 5,
            y * self.cell_size + 5,
            (x + 1) * self.cell_size - 5,
            (y + 1) * self.cell_size - 5,
            fill=color,
        )

        if self.check_winner(x, y):
            winner = "Black" if self.current_player == 1 else "White"
            self.display_winner(f"{winner} wins!")
            return

        self.current_player = 3 - self.current_player
        self.remaining_time = 30
        self.update_timer_label()

    def update_timer(self):
        if self.remaining_time > 0:
            self.remaining_time -= 1
            self.update_timer_label()
            self.after(1000, self.update_timer)
        else:
            winner = "White" if self.current_player == 1 else "Black"
            self.display_winner(f"{winner} wins by timeout!")

    def update_timer_label(self):
        player = "Black" if self.current_player == 1 else "White"
        self.timer_label.config(text=f"{player}'s time left: {self.remaining_time}s")

    def display_winner(self, message):
        self.canvas.unbind("<Button-1>")
        self.clear_screen()

        # Display the winner message
        winner_label = tk.Label(self, text=message, font=("Arial", 32, "bold"), fg="red")
        winner_label.pack(pady=50)

        # Create Restart button
        restart_button = tk.Button(
            self, text="Restart", font=("Arial", 16), command=self.restart_game
        )
        restart_button.pack(pady=10)

        # Create Quit button
        quit_button = tk.Button(
            self, text="Quit", font=("Arial", 16), command=self.quit
        )
        quit_button.pack(pady=10)

    def restart_game(self):
        self.board = [[0] * self.board_size for _ in range(self.board_size)]
        self.current_player = 1
        self.remaining_time = 30
        self.start_game()

    def check_winner(self, x, y):
        directions = [(1, 0), (0, 1), (1, 1), (1, -1)]
        for dx, dy in directions:
            count = 1
            for d in [1, -1]:
                nx, ny = x, y
                while True:
                    nx += d * dx
                    ny += d * dy
                    if (
                        0 <= nx < self.board_size
                        and 0 <= ny < self.board_size
                        and self.board[ny][nx] == self.current_player
                    ):
                        count += 1
                    else:
                        break
            if count >= 5:
                return True
        return False


if __name__ == "__main__":
    game = GomokuGame()
    game.mainloop()
