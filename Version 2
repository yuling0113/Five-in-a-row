import tkinter as tk


class GobangGame(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Gobang Game")
        self.geometry("600x650")
        self.cell_size = 30  # Size of each grid cell
        self.board_size = 15  # Board size
        self.board = [[0] * self.board_size for _ in range(self.board_size)]  # 0 represents empty
        self.current_player = 1  # 1 is black, 2 is white
        self.remaining_time = 30  # Time limit per turn
        self.timer_label = tk.Label(self, text=f"Black's time left: {self.remaining_time}s", font=("Arial", 16))
        self.timer_label.pack()
        self.canvas = tk.Canvas(self, width=self.board_size * self.cell_size, height=self.board_size * self.cell_size, bg="burlywood")
        self.canvas.pack()
        self.canvas.bind("<Button-1>", self.place_piece)
        self.draw_board()
        self.update_timer()

    def draw_board(self):
        for i in range(self.board_size):
            self.canvas.create_line(0, i * self.cell_size, self.board_size * self.cell_size, i * self.cell_size)
            self.canvas.create_line(i * self.cell_size, 0, i * self.cell_size, self.board_size * self.cell_size)

    def place_piece(self, event):
        x, y = event.x // self.cell_size, event.y // self.cell_size
        if x >= self.board_size or y >= self.board_size or self.board[y][x] != 0:
            return

        self.board[y][x] = self.current_player
        color = "black" if self.current_player == 1 else "white"
        self.canvas.create_oval(
            x * self.cell_size + 5, y * self.cell_size + 5,
            (x + 1) * self.cell_size - 5, (y + 1) * self.cell_size - 5,
            fill=color
        )

        # Check for win condition
        if self.check_winner(x, y):
            winner = "Black" if self.current_player == 1 else "White"
            self.display_winner(f"{winner} wins!")
            return

        # Switch player and reset timer
        self.current_player = 3 - self.current_player
        self.remaining_time = 30
        self.update_timer_label()

    def update_timer(self):
        if self.remaining_time > 0:
            self.remaining_time -= 1
            self.update_timer_label()
            self.after(1000, self.update_timer)
        else:
            # Time's up, the other player wins
            winner = "White" if self.current_player == 1 else "Black"
            self.display_winner(f"{winner} wins by timeout!")

    def update_timer_label(self):
        player = "Black" if self.current_player == 1 else "White"
        self.timer_label.config(text=f"{player}'s time left: {self.remaining_time}s")

    def display_winner(self, message):
        # Disable further moves
        self.canvas.unbind("<Button-1>")
        # Display winner message in the center of the board
        self.canvas.create_text(
            self.board_size * self.cell_size // 2,
            self.board_size * self.cell_size // 2,
            text=message,
            font=("Arial", 32, "bold"),
            fill="red"
        )

    def check_winner(self, x, y):
        # Check all directions for a winning sequence
        directions = [(1, 0), (0, 1), (1, 1), (1, -1)]
        for dx, dy in directions:
            count = 1
            for d in [1, -1]:
                nx, ny = x, y
                while True:
                    nx += d * dx
                    ny += d * dy
                    if 0 <= nx < self.board_size and 0 <= ny < self.board_size and self.board[ny][nx] == self.current_player:
                        count += 1
                    else:
                        break
            if count >= 5:
                return True
        return False


if __name__ == "__main__":
    game = GobangGame()
    game.mainloop()
